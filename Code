import re
from aiogram import Bot, Dispatcher, executor, types
from apscheduler.schedulers.asyncio import AsyncIOScheduler

BOT_TOKEN = "Sorry, I cannot show my bot token, but you can insert your own bot token here by getting it from BotFather.
"

bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler(timezone="Asia/Almaty")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–æ–¥–Ω–æ –Ω–∞ —á–∞—Ç –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
USER_JOBS = {}  # chat_id -> {"time": "HH:MM", "text": "..."}

HELP_TEXT = (
    "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–Ω–∞–ø–æ–º–∏–Ω–∞–ª–∫–∞.\n\n"
    "–ö–æ–º–∞–Ω–¥—ã:\n"
    "‚Ä¢ /remind HH:MM –¢–ï–ö–°–¢ ‚Äî –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è\n"
    "   –ü—Ä–∏–º–µ—Ä: /remind 09:30 –í—ã–ø–∏—Ç—å –≤–æ–¥—É\n"
    "‚Ä¢ /list ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
    "‚Ä¢ /stop ‚Äî —É–¥–∞–ª–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n"
    "–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å: Asia/Almaty"
)

def parse_hhmm(s: str):
    """–ü–∞—Ä—Å–∏–º —Å—Ç—Ä–æ–∫—É HH:MM –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º (hour, minute) –∏–ª–∏ None"""
    m = re.fullmatch(r"(\d{1,2}):(\d{2})", s.strip())
    if not m:
        return None
    h, mnt = int(m.group(1)), int(m.group(2))
    if 0 <= h < 24 and 0 <= mnt < 60:
        return h, mnt
    return None

async def send_reminder(chat_id: int, text: str):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"""
    await bot.send_message(chat_id, f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")

@dp.message_handler(commands=["start", "help"])
async def cmd_start(message: types.Message):
    await message.answer(HELP_TEXT)

@dp.message_handler(commands=["remind"])
async def cmd_remind(message: types.Message):
    args = message.get_args()
    if not args:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /remind HH:MM –¢–ï–ö–°–¢\n–ü—Ä–∏–º–µ—Ä: /remind 21:15 –ü—Ä–∏–Ω—è—Ç—å –≤–∏—Ç–∞–º–∏–Ω—ã")

    parts = args.split(maxsplit=1)
    if len(parts) < 2:
        return await message.answer("–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –∏ –≤—Ä–µ–º—è, –∏ —Ç–µ–∫—Å—Ç. –ü—Ä–∏–º–µ—Ä: /remind 08:00 –í—ã–ø–∏—Ç—å –≤–æ–¥—É")

    time_str, text = parts[0], parts[1].strip()
    parsed = parse_hhmm(time_str)
    if not parsed:
        return await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π HH:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä: 09:05).")

    hour, minute = parsed
    chat_id = message.chat.id
    job_id = f"reminder_{chat_id}"

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ, –µ—Å–ª–∏ –±—ã–ª–æ
    old_job = scheduler.get_job(job_id)
    if old_job:
        old_job.remove()

    # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    scheduler.add_job(
        send_reminder,
        "cron",
        hour=hour,
        minute=minute,
        args=[chat_id, text],
        id=job_id,
        replace_existing=True,
    )

    USER_JOBS[chat_id] = {"time": f"{hour:02d}:{minute:02d}", "text": text}
    await message.answer(f"‚úÖ –ì–æ—Ç–æ–≤–æ! –ë—É–¥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {hour:02d}:{minute:02d} ‚Äî ¬´{text}¬ª.")

@dp.message_handler(commands=["list"])
async def cmd_list(message: types.Message):
    info = USER_JOBS.get(message.chat.id)
    if not info:
        return await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π. –î–æ–±–∞–≤—å: /remind HH:MM –¢–ï–ö–°–¢")
    await message.answer(f"–ê–∫—Ç–∏–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {info['time']} ‚Äî ¬´{info['text']}¬ª")

@dp.message_handler(commands=["stop"])
async def cmd_stop(message: types.Message):
    chat_id = message.chat.id
    job_id = f"reminder_{chat_id}"

    job = scheduler.get_job(job_id)
    if job:
        job.remove()
    USER_JOBS.pop(chat_id, None)

    await message.answer("üõë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤–º–µ—Å—Ç–µ —Å –±–æ—Ç–æ–º
async def on_startup(_):
    scheduler.start()

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True, on_startup=on_startup)
